cuda multiplication
// matrix multiplication

#include<stdio.h>

__global__ void matmul(float *A, float *B, float *C, int n){
    int row = blockIdx.y *blockDim.y + threadIdx.y;
    int col = blockIdx.x *blockDim.x + threadIdx.x;
    if(row<n &col<n){
        float sum = 0;
        for(int k = 0;k<n;k++){
            sum = sum+ A[row *n +k] * B[n *k+col];
        C[row *n +col] = sum;

        }
    }
}

int main()
{
    int n =2;
    size_t size = n*n * sizeof(float);
    float A[] = {1,2,3,4};
    float B[] = {5,6,7,8};
    float C[4];

    float *d_A, *d_B,*d_C;

    cudaMalloc(&d_A,size);
    cudaMalloc(&d_B,size);
    cudaMalloc(&d_C,size);

    cudaMemcpy(d_A,A,size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B,B,size, cudaMemcpyHostToDevice);

    dim3 blocks(n,n);
    dim3 threads(1,1);

    matmul<<<blocks ,threads>>>(d_A,d_B,d_C,n);

    cudaMemcpy(C,d_C,size,cudaMemcpyDeviceToHost);

    for(int i =0;i<n*n ;i++){
        printf("%f", C[i]);
    }

}

Step to run command in linux
Open a terminal and create a .cu file using a text editor like nano
nano matmul.cu

compile 
nvcc -o matmul matmul.cu
./matmul
